// u.root

//.u\.root {
//    width: 100%;
//    overflow: hidden;
//    display: block;
//}

// u.container

[class*='u.container'] {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    width: calc(100% + #{$grid--gutter--default});
    margin-top: -$grid--gutter--default;
    margin-left: -$grid--gutter--default;
}

.u\.container {

    // nowrap

    @include responsive('&\\:nowrap') {
        flex-wrap: nowrap;
    }

    // horizontal align

    @include responsive('&\\:right') {
        justify-content: flex-end;
    }

    @include responsive('&\\:center') {
        justify-content: center;
    }

    @include responsive('&\\:repel') {
        justify-content: space-between;
    }

    // vertical align

    @include responsive('&\\:top') {
        align-items: flex-start;
    }

    @include responsive('&\\:bottom') {
        align-items: flex-end;
    }

    @include responsive('&\\:baseline') {
        align-items: baseline;
    }

    @include responsive('&\\:tall') {
        align-items: stretch;
    }

    // padding (don't use @responsive because of specificity collisions)

    @each $breakpoint-key, $breakpoint-val in $breakpoints {
        @media #{$breakpoint-val} {
            @each $padding-key, $padding-val in $grid--padding {
                &\:hpad-#{$padding-key}\@#{$breakpoint-key}  {
                    padding-left: $padding-val;
                    padding-right: $padding-val;
                }

                &\:vpad-#{$padding-key}\@#{$breakpoint-key}  {
                    padding-top: $padding-val;
                    padding-bottom: $padding-val;
                }

                &\:pad-#{$padding-key}\@#{$breakpoint-key}  {
                    padding: $padding-val;
                }
            }
        }
    }

    // vertical gutter

    @each $gutter-key, $gutter-val in $grid--gutter--options {
        &\:vspace-#{$gutter-key} {
            margin-top: -$gutter-val;

            & > [class*='u.item'] {
                margin-top: $gutter-val;
            }
        }
    }

    // horizontal gutter

    @each $gutter-key, $gutter-val in $grid--gutter--options {
        &\:hspace-#{$gutter-key} {
            width: calc(100% + #{$gutter-val});
            margin-left: -$gutter-val;
            & > [class*='u.item'] {
                margin-left: $gutter-val;
            }
        }
    }
}

// u.item

[class*='u.item'] {
    flex-shrink: 1;
    margin-top: $grid--gutter--default;
    margin-left: $grid--gutter--default;
    overflow: hidden;
    overflow-wrap: break-word;
}

.u\.item {

    // flex-shrink

    @include responsive('&\\:shrink') {
        flex-shrink: 99;
    }

    @include responsive('&\\:static') {
        flex-shrink: 0;
    }

    // flex-grow

    @include responsive('&\\:grow') {
        flex-grow: 99;
    }

    // vertical align

    @include responsive('&\\:top') {
        align-self: flex-start;
    }

    @include responsive('&\\:bottom') {
        align-self: flex-end;
    }

    @include responsive('&\\:baseline') {
        align-self: baseline;
    }

    @include responsive('&\\:tall') {
        align-self: stretch;
    }

    // max width

    &\:cap {
        max-width: $grid--max-width;
    }

    // order

    @include responsive('&\\:first') {
        order: -1;
    }

    @include responsive('&\\:last') {
        order: 1;
    }

    // width (don't use @responsive because of specificity collisions)

    @each $breakpoint-key, $breakpoint-val in $breakpoints {
        @media #{$breakpoint-val} {
            @each $width-key, $width-val in $grid--widths {
                &\:#{$width-key}\@#{$breakpoint-key} {
                    width: calc(#{$width-val} - #{$grid--gutter--default});
                    flex-shrink: 0;
                    @each $gutter-key, $gutter-val in $grid--gutter--options {
                        .u\.container\:hspace-#{$gutter-key} > & {
                            width: calc(#{$width-val} - #{$gutter-val});
                            flex-shrink: 0;
                        }
                    }
                }
            }
        }
    }
}
